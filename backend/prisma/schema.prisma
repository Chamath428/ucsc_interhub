generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model advertisement {
  advertisement_id            Int                           @id @default(autoincrement())
  title                       String                        @db.VarChar(255)
  job_role                    Int
  job_description             String?                       @db.VarChar(2000)
  requested_interns           Int?
  advertisement_picture       String?                       @db.VarChar(1000)
  advertisement_video         String?                       @db.VarChar(1000)
  advertisement_ref_no        String?                       @db.VarChar(100)
  company_id                  Int
  program_id                  Int
  status                      Int                           @default(1)
  company                     company                       @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "advertisement_ibfk_1")
  internship_program          internship_program            @relation(fields: [program_id], references: [program_id], onDelete: Cascade, map: "advertisement_ibfk_2")
  job_roles                   job_roles                     @relation(fields: [job_role], references: [id], onUpdate: Restrict, map: "advertisement_ibfk_3")
  advertisement_status        advertisement_status          @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "advertisement_ibfk_4")
  advertisement_technologies  advertisement_technologies[]
  interview                   interview[]
  student_applied_internships student_applied_internships[]

  @@index([company_id], map: "company_id")
  @@index([job_role], map: "job_role")
  @@index([program_id], map: "program_id")
  @@index([status], map: "status")
}

model advertisement_status {
  id            Int             @id @default(autoincrement())
  type          String          @db.VarChar(50)
  advertisement advertisement[]
}

model advertisement_technologies {
  advertisement_id Int
  technologies     String        @db.VarChar(100)
  advertisement    advertisement @relation(fields: [advertisement_id], references: [advertisement_id], onDelete: Cascade, map: "advertisement_technologies_ibfk_1")

  @@id([advertisement_id, technologies])
}

model announcement {
  announcement_id    Int                @id @default(autoincrement())
  title              String             @db.VarChar(100)
  body               String             @db.VarChar(3000)
  time               String?            @db.VarChar(50)
  date               String?            @db.VarChar(50)
  type               Int
  email_address      String             @db.VarChar(100)
  pdc                pdc                @relation(fields: [email_address], references: [email_address], onDelete: Cascade, map: "announcement_ibfk_1")
  announcement_types announcement_types @relation(fields: [type], references: [id], onDelete: Cascade, map: "announcement_ibfk_2")

  @@index([email_address], map: "email_address")
  @@index([type], map: "type")
}

model announcement_types {
  id           Int            @id @default(autoincrement())
  type         String         @db.VarChar(100)
  announcement announcement[]
}

model company {
  company_id                  Int                           @id @default(autoincrement())
  name                        String                        @db.VarChar(200)
  registration_number         String                        @unique(map: "registration_number") @db.VarChar(100)
  date_of_establishment       String                        @db.VarChar(50)
  description                 String?                       @db.VarChar(1000)
  website                     String                        @db.VarChar(200)
  address                     String                        @db.VarChar(500)
  fax_no                      Int?
  company_status              Int
  no_of_employees             Int
  no_of_project_managers      Int
  no_of_tech_leads            Int
  is_registered_other_uni     Int
  password                    String                        @db.VarChar(100)
  username                    String                        @unique(map: "username") @db.VarChar(100)
  profile_picture             String?                       @db.VarChar(1000)
  intro_video                 String?                       @db.VarChar(1000)
  company_status_types        company_status_types          @relation(fields: [company_status], references: [id], onDelete: Cascade, map: "company_ibfk_1")
  advertisement               advertisement[]
  company_clients             company_clients[]
  company_contacts            company_contacts[]
  company_events              company_events[]
  company_hr                  company_hr?
  company_notification        company_notification[]
  company_partners            company_partners[]
  company_visit               company_visit[]
  internships                 internships[]
  interview                   interview[]
  student_applied_internships student_applied_internships[]
  supervisor                  supervisor[]

  @@index([company_status], map: "company_status")
}

model company_clients {
  company_id Int
  client     String  @db.VarChar(100)
  company    company @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_clients_ibfk_1")

  @@id([company_id, client])
}

model company_contacts {
  company_id   Int
  telephone_no Int
  company      company @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_contacts_ibfk_1")

  @@id([company_id, telephone_no])
}

model company_events {
  event_id      Int     @default(autoincrement())
  company_id    Int
  topic         String  @db.VarChar(100)
  time          String? @db.VarChar(50)
  event_picture String? @db.VarChar(100)
  event_video   String? @db.VarChar(100)
  body          String  @db.VarChar(2000)
  date          String? @db.VarChar(50)
  company       company @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_events_ibfk_1")

  @@id([event_id, company_id])
  @@index([company_id], map: "company_id")
}

model company_hr {
  company_id  Int     @id
  name        String  @db.VarChar(200)
  email       String  @db.VarChar(100)
  landline_no Int?
  mobile_no   Int
  company     company @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_hr_ibfk_1")
}

model company_notification {
  notification_id Int
  company_id      Int
  company         company      @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_notification_ibfk_1")
  notification    notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade, map: "company_notification_ibfk_2")

  @@id([notification_id, company_id])
  @@index([company_id], map: "company_id")
}

model company_partners {
  company_id Int
  partners   String  @db.VarChar(100)
  company    company @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_partners_ibfk_1")

  @@id([company_id, partners])
}

model company_status_types {
  id      Int       @id @default(autoincrement())
  type    String    @db.VarChar(100)
  company company[]
}

model company_visit {
  company_visit_id           Int                        @default(autoincrement())
  company_id                 Int
  email_address              String                     @db.VarChar(100)
  date                       String                     @db.VarChar(50)
  start_time                 String                     @db.VarChar(50)
  company_visit_type         Int
  status                     Int
  company                    company                    @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "company_visit_ibfk_1")
  pdc                        pdc                        @relation(fields: [email_address], references: [email_address], onDelete: Cascade, map: "company_visit_ibfk_2")
  company_visit_types        company_visit_types        @relation(fields: [company_visit_type], references: [id], onDelete: Cascade, map: "company_visit_ibfk_3")
  company_visit_status_types company_visit_status_types @relation(fields: [status], references: [id], onDelete: Cascade, map: "company_visit_ibfk_4")

  @@id([company_visit_id, company_id, email_address])
  @@index([company_id], map: "company_id")
  @@index([company_visit_type], map: "company_visit_type")
  @@index([email_address], map: "email_address")
  @@index([status], map: "status")
}

model company_visit_status_types {
  id            Int             @id @default(autoincrement())
  status        String          @db.VarChar(20)
  company_visit company_visit[]
}

model company_visit_types {
  id            Int             @id @default(autoincrement())
  type          String          @db.VarChar(100)
  company_visit company_visit[]
  interview     interview[]
}

model internship_program {
  program_id                Int                       @id @default(autoincrement())
  batch_no                  Int?
  start_date                String                    @db.VarChar(50)
  end_date                  String?                   @db.VarChar(50)
  status                    Int                       @default(1)
  is_active                 Int                       @default(1)
  email_address             String                    @db.VarChar(100)
  pdc                       pdc                       @relation(fields: [email_address], references: [email_address], onDelete: Cascade, map: "internship_program_ibfk_1")
  internship_program_status internship_program_status @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "internship_program_ibfk_2")
  advertisement             advertisement[]
  student                   student[]

  @@index([email_address], map: "email_address")
  @@index([status], map: "status")
}

model internship_program_status {
  id                 Int                  @id @default(autoincrement())
  type               String               @db.VarChar(50)
  internship_program internship_program[]
}

model internships {
  internship_id   Int               @id @default(autoincrement())
  job_role        String            @db.VarChar(100)
  started_date    String            @db.VarChar(50)
  index_number    Int
  company_id      Int
  supervisor_id   Int?
  student         student           @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "internships_ibfk_1")
  company         company           @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "internships_ibfk_2")
  supervisor      supervisor?       @relation(fields: [supervisor_id], references: [supervisor_id], onDelete: Cascade, map: "internships_ibfk_3")
  student_reports student_reports[]

  @@index([company_id], map: "company_id")
  @@index([index_number], map: "index_number")
  @@index([supervisor_id], map: "supervisor_id")
}

model interview {
  interview_id              Int                         @unique(map: "interview_id") @default(autoincrement())
  company_id                Int
  index_number              Int
  date                      String                      @db.VarChar(30)
  start_time                String                      @db.VarChar(20)
  end_time                  String                      @db.VarChar(20)
  interview_type            Int
  interview_status          Int
  advertiesment_id          Int?
  company                   company                     @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "interview_ibfk_1")
  student                   student                     @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "interview_ibfk_2")
  company_visit_types       company_visit_types         @relation(fields: [interview_type], references: [id], onDelete: Cascade, map: "interview_ibfk_3")
  interview_status_types    interview_status_types      @relation(fields: [interview_status], references: [id], onDelete: Cascade, map: "interview_ibfk_4")
  advertisement             advertisement?              @relation(fields: [advertiesment_id], references: [advertisement_id], onDelete: NoAction, onUpdate: NoAction, map: "interview_ibfk_5")
  interview_decline_message interview_decline_message[]

  @@id([interview_id, company_id, index_number])
  @@index([advertiesment_id], map: "advertiesment_id")
  @@index([company_id], map: "company_id")
  @@index([index_number], map: "index_number")
  @@index([interview_status], map: "interview_status")
  @@index([interview_type], map: "interview_type")
}

model interview_decline_message {
  id           Int       @id @default(autoincrement())
  interview_id Int
  message      String    @db.LongText
  interview    interview @relation(fields: [interview_id], references: [interview_id], onDelete: Cascade, map: "interview_decline_message_ibfk_1")

  @@index([interview_id], map: "interview_id")
}

model interview_status_types {
  id        Int         @id @default(autoincrement())
  status    String      @db.VarChar(100)
  interview interview[]
}

model job_roles {
  id                         Int                          @id @default(autoincrement())
  job_role                   String                       @db.VarChar(100)
  advertisement              advertisement[]
  student_preferred_job_role student_preferred_job_role[]
}

model notification {
  notification_id         Int                       @id
  message                 String                    @db.VarChar(1000)
  date                    String                    @db.VarChar(50)
  link                    String                    @db.VarChar(100)
  time                    String                    @db.VarChar(50)
  status                  Int
  company_notification    company_notification[]
  pdc_notification        pdc_notification[]
  student_notification    student_notification[]
  supervisor_notification supervisor_notification[]
}

model pdc {
  email_address      String               @id @db.VarChar(100)
  first_name         String               @db.VarChar(100)
  last_name          String               @db.VarChar(100)
  password           String               @db.VarChar(100)
  profile_picture    String?              @db.VarChar(100)
  role               Int
  is_active          Int
  pdc_role           pdc_role             @relation(fields: [role], references: [id], onDelete: Cascade, map: "pdc_ibfk_1")
  announcement       announcement[]
  company_visit      company_visit[]
  internship_program internship_program[]
  pdc_notification   pdc_notification[]
  report_handle      report_handle[]

  @@index([role], map: "role")
}

model pdc_member_is_active {
  id     Int    @id @default(autoincrement())
  status String @db.VarChar(100)
}

model pdc_notification {
  notification_id Int
  email_address   String       @db.VarChar(100)
  notification    notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade, map: "pdc_notification_ibfk_1")
  pdc             pdc          @relation(fields: [email_address], references: [email_address], onDelete: Cascade, map: "pdc_notification_ibfk_2")

  @@id([notification_id, email_address])
  @@index([email_address], map: "email_address")
}

model pdc_role {
  id   Int    @id @default(autoincrement())
  role String @db.VarChar(100)
  pdc  pdc[]
}

model report_handle {
  report_id       Int               @unique(map: "report_id")
  email_address   String            @db.VarChar(100)
  deadline_date   String            @db.VarChar(50)
  deadline_time   String            @db.VarChar(50)
  report_link     String            @db.VarChar(100)
  pdc             pdc               @relation(fields: [email_address], references: [email_address], onDelete: Cascade, map: "report_handle_ibfk_2")
  student_reports student_reports[]

  @@id([report_id, email_address])
  @@index([email_address], map: "email_address")
}

model report_status_types {
  id              Int               @id @default(autoincrement())
  status          String            @db.VarChar(100)
  student_reports student_reports[]
}

model report_type {
  id              Int               @id @default(autoincrement())
  type            String            @db.VarChar(100)
  student_reports student_reports[]
}

model student {
  index_number                    Int                               @id
  registration_number             String                            @db.VarChar(20)
  name                            String                            @db.VarChar(100)
  password                        String?                           @db.VarChar(100)
  nic                             String?                           @db.VarChar(20)
  email                           String?                           @db.VarChar(100)
  cv                              String?                           @db.VarChar(100)
  intro_video                     String?                           @db.VarChar(100)
  profile_picture                 String?                           @db.VarChar(100)
  student_status                  Int?
  degree                          Int
  gpa                             String                            @db.VarChar(10)
  about_me                        String?                           @db.VarChar(1000)
  github                          String?                           @db.VarChar(100)
  linkedin                        String?                           @db.VarChar(100)
  facebook                        String?                           @db.VarChar(100)
  preferred_role                  String?                           @db.VarChar(100)
  program_id                      Int
  internship_program              internship_program                @relation(fields: [program_id], references: [program_id], onDelete: Cascade, map: "student_ibfk_1")
  student_status_type             student_status_type?              @relation(fields: [student_status], references: [id], onDelete: Cascade, map: "student_ibfk_2")
  internships                     internships[]
  interview                       interview[]
  student_academic_qualifications student_academic_qualifications[]
  student_applied_internships     student_applied_internships[]
  student_availability            student_availability?
  student_notification            student_notification[]
  student_preferred_job_role      student_preferred_job_role[]
  student_work_experience         student_work_experience[]

  @@index([program_id], map: "program_id")
  @@index([student_status], map: "student_status")
}

model student_academic_qualifications {
  index_number  Int
  qualification String  @db.VarChar(300)
  student       student @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_academic_qualifications_ibfk_1")

  @@id([index_number, qualification])
}

model student_applied_internships {
  index_number     Int
  advertisement_id Int
  is_wish_list     Int           @default(0)
  company_id       Int
  student          student       @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_applied_internships_ibfk_1")
  advertisement    advertisement @relation(fields: [advertisement_id], references: [advertisement_id], onDelete: Cascade, map: "student_applied_internships_ibfk_2")
  company          company       @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "student_applied_internships_ibfk_3")

  @@id([index_number, advertisement_id])
  @@index([advertisement_id], map: "advertisement_id")
  @@index([company_id], map: "company_id")
}

model student_availability {
  index_number        Int     @id
  date                String  @db.VarChar(100)
  start_time          String  @db.VarChar(20)
  end_time            String  @db.VarChar(20)
  availability_status Int
  student             student @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_availability_ibfk_1")
}

model student_degree {
  id     Int    @id @default(autoincrement())
  degree String @db.VarChar(100)
}

model student_notification {
  notification_id Int
  index_number    Int
  student         student      @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_notification_ibfk_1")
  notification    notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade, map: "student_notification_ibfk_2")

  @@id([notification_id, index_number])
  @@index([index_number], map: "index_number")
}

model student_preferred_job_role {
  index_number Int
  job_role     Int
  student      student   @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_preferred_job_role_ibfk_1")
  job_roles    job_roles @relation(fields: [job_role], references: [id], onDelete: Cascade, map: "student_preferred_job_role_ibfk_2")

  @@id([index_number, job_role])
  @@index([job_role], map: "job_role")
}

model student_reports {
  id                                       Int                 @id @default(autoincrement())
  report_id                                Int
  report_type                              Int
  date                                     String              @db.VarChar(50)
  time                                     String              @db.VarChar(50)
  report_link                              String?             @db.VarChar(1000)
  report_status                            Int
  feedback                                 String?             @db.VarChar(300)
  internship_id                            Int
  supervisor_id                            Int?
  internships                              internships         @relation(fields: [internship_id], references: [internship_id], onDelete: Cascade, map: "student_reports_ibfk_1")
  supervisor                               supervisor?         @relation(fields: [supervisor_id], references: [supervisor_id], onDelete: Cascade, map: "student_reports_ibfk_2")
  report_type_report_typeTostudent_reports report_type         @relation(fields: [report_type], references: [id], onDelete: Cascade, map: "student_reports_ibfk_4")
  report_status_types                      report_status_types @relation(fields: [report_status], references: [id], onDelete: Cascade, map: "student_reports_ibfk_5")
  report_handle                            report_handle       @relation(fields: [report_id], references: [report_id], onDelete: Cascade, map: "student_reports_ibfk_6")

  @@index([internship_id], map: "internship_id")
  @@index([report_id], map: "report_id")
  @@index([report_status], map: "report_status")
  @@index([report_type], map: "report_type")
  @@index([supervisor_id], map: "supervisor_id")
}

model student_status_type {
  id      Int       @id @default(autoincrement())
  status  String    @db.VarChar(100)
  student student[]
}

model student_work_experience {
  index_number Int
  experience   String  @db.VarChar(300)
  student      student @relation(fields: [index_number], references: [index_number], onDelete: Cascade, map: "student_work_experience_ibfk_1")

  @@id([index_number, experience])
}

model supervisor {
  supervisor_id           Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(100)
  email                   String                    @db.VarChar(100)
  profile_picture         String?                   @db.VarChar(100)
  password                String?                   @db.VarChar(100)
  company_id              Int
  company                 company                   @relation(fields: [company_id], references: [company_id], onDelete: Cascade, map: "supervisor_ibfk_1")
  internships             internships[]
  student_reports         student_reports[]
  supervisor_notification supervisor_notification[]

  @@index([company_id], map: "company_id")
}

model supervisor_notification {
  notification_id Int
  supervisor_id   Int
  notification    notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade, map: "supervisor_notification_ibfk_1")
  supervisor      supervisor   @relation(fields: [supervisor_id], references: [supervisor_id], onDelete: Cascade, map: "supervisor_notification_ibfk_2")

  @@id([notification_id, supervisor_id])
  @@index([supervisor_id], map: "supervisor_id")
}
